function addLoadEvent(func) 
{
	var oldonload = window.onload;
	if (typeof window.onload != 'function') 
	{
		window.onload = func;
	}
	else 
	{
		window.onload = function() 
		{
			if (oldonload) 
			{
				oldonload();
			}
			func();
		}
	}
}


function getElementsByClass(searchClass,node,tag) 
{
	var classElements = new Array();
	if ( node == null )
	node = document;
	if ( tag == null )
	tag = '*';
	var els = node.getElementsByTagName(tag);
	var elsLen = els.length;
	var pattern = new RegExp("(^|\\s)"+searchClass+"(\\s|$)");
	j=0;
	for (i=0; i < elsLen; i++) {
		if ( pattern.test(els[i].className) ) 
		{
			classElements[j] = els[i];
			j++;
		}
	}
	return classElements;
}


function insertAfter(newElement, targetElement) 
{
	var parent = targetElement.parentNode;
	if (parent.lastChild == targetElement) 
	{
		parent.appendChild(newElement);
	}
	else 
	{
		parent.insertBefore(newElement, targetElement.nextSibling);
	}
}


function IntercambiarDisplay(objeto)
{
	if(document.getElementById(objeto))	
	{
		if(document.getElementById(objeto).style.display == "none")	
			document.getElementById(objeto).style.display = ""
		else
			document.getElementById(objeto).style.display = "none"			
	}
}

function MostrarOcultar(objeto)
{
	if(document.getElementById(objeto))	
	{
		if(document.getElementById(objeto).style.visibility == "hidden" || document.getElementById(objeto).style.visibility == "")
		{	
			document.getElementById(objeto).style.visibility = "visible"	
			document.getElementById(objeto).style.display = "block"
		}
		else
		{
			document.getElementById(objeto).style.visibility = "hidden"
			document.getElementById(objeto).style.display = "none"				
		}
	}
}

function  ImprimirPropiedades(obj, objName) 
{
	var output = "" ;
	for (var prop in obj) 
	{
		output += objName + "." + prop + " = " + obj[prop] + "<br>" ;
	}
	
	document.write(output)
	return output ;
}

function FechaHora()
{
	var Digital = new Date()
	var horas = Digital.getHours()
	var minutos = Digital.getMinutes()
	var segundos=Digital.getSeconds()
	var dia=Digital.getDay();
	var mes=Digital.getMonth();
	var ano=Digital.getYear();

	var fh = new String(ano + "" + mes + dia + horas + "" + minutos + segundos);

	return fh;
} 

function FormatearCodigo(num, n, f, r){
	return n = new Array((++n, f ? (f = (num + "").length) < n ? n - f : 0 : n)).join(0), r ? num + n : n + num;
};

function pharis_util_log(mensaje)
{
	alert(mensaje)
}

function pharis_util_mensaje(mensaje)
{
	Mensaje(mensaje)
}

function pharis_util_cerrarmensaje(tiempo)
{
	CerrarMensaje(tiempo)
}

/*
id: Id del desplegable a carcar
url: Url en donde cargar el desplegable
variables: Variables para enviar
finalizar: funciona a ejecutar el finalizar la peticion, envia como primer parametro los datos
*/

function pharis_ajax_desplegable(config)
{
	if(!document.getElementById(config.id))
	{
		pharis_util_log("No se ha suministrado un id para cargar el desplegable o no existe:"+config.id.toString())
		return false;
	}
	
	config.type = "GET"
	config.dataType = "json"
	config.data = config.variables
	
	if(config.seleccione == undefined)
		config.seleccione = true
		
	if(!config.mensaje == undefined)
		config.mensaje = "Cargando..."
		
	
	config.success = function(datos){
		pharis_util_cerrarmensaje(0)
		
		if(config.finalizar != undefined)
			config.finalizar.call(datos)
		
		if(datos.length == 0)
			return;
		
		var i=0;
		var campoid;
		var campotexto;
		
		for(var key in datos[0]){
			if(i==0)
				campoid = key;
				
			if(i==1)
				campotexto = key;
				
			if(i > 1)
				break;
				
			i++;
		}
					
		$.each(datos, function(i, item){
			var valorid = eval('item.'+campoid)
			var valortexto = eval('item.'+campotexto)
			$("#"+config.id).append('<option value="'+valorid+'">'+valortexto+'</option>')	
		});
		
	}
	
	
	$("#"+config.id).html("")
			
	if(config.seleccione == true)
		$("#"+config.id).append('<option value="desplegable_sin_valor">Seleccione...</option>')	
	
	pharis_util_mensaje(config.mensaje)
	$.ajax(config);		
}


function DesplegableXml(iddesplegable, xml, campoid, camponombre)
{   
		 var id
		var nombre
		var rows = xml.getElementsByTagName("row");        
		var tamano = rows.length
		var desplegable = document.getElementById(iddesplegable)      
		desplegable.length = null     
		 
		 
		for(var i=0;i<tamano;i++)
		{                
				if (rows[i].nodeType == 1)
				{    
						for(j=0;j<rows[i].childNodes.length;j++)
						{
								if (rows[i].childNodes[j].nodeType == 1)
								{    
										if(rows[i].childNodes[j].nodeName == campoid)  
										{
												try{                                  
														id = rows[i].childNodes[j].firstChild.nodeValue   
												}catch(e){
													 id = "" 
												}
										}                          
										
										
										if(rows[i].childNodes[j].nodeName == camponombre )
										{
												try{
														nombre = rows[i].childNodes[j].firstChild.nodeValue
												}catch(e){
													 nombre = "" 
												}
										}                    
								}
						}
						
						var opcion = document.createElement("option");
						var label = document.createTextNode(nombre);
						opcion.appendChild(label);
						opcion.setAttribute("value",id);
						desplegable.appendChild(opcion);   
				}            
				
		}
}

function DesplegableCargando(iddesplegable)
{
		var desplegable = document.getElementById(iddesplegable)
		desplegable.length = null  
		
		var opcion = new Option("Cargando...", "desplegable_sin_valor","","");              
		desplegable.appendChild(opcion) 
}

function FormatearNumero(num)
{
		var numero = new FormatoNumero()
		numero.sepmiles = ','
		numero.dec = 2
		numero.miles = true
		numero.valor = num
		return numero.formato()
}

function Mensaje(text, tipo)
{
	 if(!document.getElementById("mensajeestado")) 
				$("body").prepend('<div id="mensajeestado"></div> ')
				
	 $("#mensajeestado").removeClass("error ok")
	 
	 if(tipo != null)
	 {
			$("#mensajeestado").addClass(tipo)  
	 } 
		
	 $("#mensajeestado").html('<div class="cargando"><span>'+text+'</span></div>');   
	 $("#mensajeestado").fadeIn("normal");
}

function CerrarMensaje(tiempo)
{
		if(tiempo == null)
				tiempo = 3000
		else
				tiempo = tiempo*1000

		 //Esconder mensajes de estado
		setTimeout(TemporizadorLimpiarMensajes, tiempo);
}

function TemporizadorLimpiarMensajes(){
		$("#mensajeestado").fadeOut("normal");    
}

function strtoint(str)
{
		return  parseInt(str_replace([","], "", str))
}

function number_format(number, decimals, dec_point, thousands_sep) {
		var n = !isFinite(+number) ? 0 : +number, 
				prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
				sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
				s = '',
				toFixedFix = function (n, prec) {
						var k = Math.pow(10, prec);
						return '' + Math.round(n * k) / k;        };
		// Fix for IE parseFloat(0.55).toFixed(0) = 0;
		s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
		if (s[0].length > 3) {
				s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);    }
		if ((s[1] || '').length < prec) {
				s[1] = s[1] || '';
				s[1] += new Array(prec - s[1].length + 1).join('0');
		}    return s.join(dec);
}

function str_replace (search, replace, subject, count) {
						f = [].concat(search),
						r = [].concat(replace),
						s = subject,
						ra = r instanceof Array, sa = s instanceof Array;    s = [].concat(s);
		if (count) {
				this.window[count] = 0;
		}
		 for (i=0, sl=s.length; i < sl; i++) {
				if (s[i] === '') {
						continue;
				}
				for (j=0, fl=f.length; j < fl; j++) {            temp = s[i]+'';
						repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];
						s[i] = (temp).split(f[j]).join(repl);
						if (count && s[i] !== temp) {
								this.window[count] += (temp.length-s[i].length)/f[j].length;}        }
		}
		return sa ? s : s[0];
}

function trim (str, charlist) {
		str += '';
		
		if (!charlist) {
				whitespace = " \n\r\t\f\x0b\xa0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000";
		} else {
				// preg_quote custom list
				charlist += '';
				whitespace = charlist.replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, '$1');    }
		
		l = str.length;
		for (i = 0; i < l; i++) {
				if (whitespace.indexOf(str.charAt(i)) === -1) {            str = str.substring(i);
						break;
				}
		}

		l = str.length;
		for (i = l - 1; i >= 0; i--)
		{
				if (whitespace.indexOf(str.charAt(i)) === -1) {
						str = str.substring(0, i + 1);
						break;        }
		}
		
		return whitespace.indexOf(str.charAt(0)) === -1 ? str : '';
}

$.extend($.expr[':'], {
	'containsi': function(elem, i, match, array)
	{
		return (elem.textContent || elem.innerText || '').toLowerCase()
		.indexOf((match[3] || "").toLowerCase()) >= 0;
	}
});

